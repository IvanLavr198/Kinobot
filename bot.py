import os
import logging
from aiohttp import web
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Dispatcher

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TMDB_API_KEY = os.getenv('TMDB_API_KEY')

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–Ω–æ–±–æ—Ç.\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º ‚Äî –Ω–∞–ø–∏—à–∏ /film –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª ‚Äî –Ω–∞–ø–∏—à–∏ /tv –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞"
    )

def tmdb_search(query, media_type='movie'):
    import requests
    url = f'https://api.themoviedb.org/3/search/{media_type}'
    params = {
        'api_key': TMDB_API_KEY,
        'language': 'ru-RU',
        'query': query,
        'include_adult': False
    }
    response = requests.get(url, params=params)
    if response.status_code != 200:
        return None
    data = response.json()
    if data.get('results'):
        return data['results'][0]
    return None

async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /film")
        return
    query = ' '.join(context.args)
    film = tmdb_search(query, 'movie')
    if not film:
        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    title = film.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    overview = film.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    rating = film.get('vote_average', '‚Äî')
    poster_path = film.get('poster_path')
    poster_url = f'https://image.tmdb.org/t/p/w500{poster_path}' if poster_path else None

    text = f"üé¨ <b>{title}</b>\n\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n{overview}"

    if poster_url:
        await update.message.reply_photo(photo=poster_url, caption=text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')

async def search_tv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /tv")
        return
    query = ' '.join(context.args)
    tv_show = tmdb_search(query, 'tv')
    if not tv_show:
        await update.message.reply_text("–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    title = tv_show.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    overview = tv_show.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    rating = tv_show.get('vote_average', '‚Äî')
    poster_path = tv_show.get('poster_path')
    poster_url = f'https://image.tmdb.org/t/p/w500{poster_path}' if poster_path else None

    text = f"üì∫ <b>{title}</b>\n\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n{overview}"

    if poster_url:
        await update.message.reply_photo(photo=poster_url, caption=text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')


async def handle_update(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (webhook)"""
    bot = request.app['bot']
    data = await request.json()
    update = Update.de_json(data, bot)
    dispatcher = request.app['dispatcher']
    await dispatcher.process_update(update)
    return web.Response()

async def on_startup(app):
    bot = Bot(token=TELEGRAM_TOKEN)
    app['bot'] = bot
    dispatcher = Dispatcher(bot, None, workers=0)
    app['dispatcher'] = dispatcher

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('film', search_movie))
    dispatcher.add_handler(CommandHandler('tv', search_tv))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (URL —É–∫–∞–∂–µ–º –ø–æ–∑–∂–µ)
    WEBHOOK_URL = os.getenv('WEBHOOK_URL')
    if not WEBHOOK_URL:
        raise ValueError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    await bot.set_webhook(WEBHOOK_URL)

async def on_cleanup(app):
    bot = app['bot']
    await bot.delete_webhook()

def main():
    if not TELEGRAM_TOKEN or not TMDB_API_KEY:
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –∏ TMDB_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")
        return

    app = web.Application()
    app.router.add_post(f'/{TELEGRAM_TOKEN}', handle_update)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)

    port = int(os.environ.get('PORT', 8080))
    web.run_app(app, port=port)

if __name__ == '__main__':
    main()
