import os
import logging
import requests
from aiohttp import web
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TMDB_API_KEY = os.getenv('TMDB_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', '8080'))

if not TELEGRAM_TOKEN or not TMDB_API_KEY or not WEBHOOK_URL:
    logger.error("TELEGRAM_TOKEN, TMDB_API_KEY –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ TMDB
def tmdb_search(query: str, media_type='movie'):
    url = f'https://api.themoviedb.org/3/search/{media_type}'
    params = {
        'api_key': TMDB_API_KEY,
        'language': 'ru-RU',
        'query': query,
        'include_adult': False
    }
    resp = requests.get(url, params=params)
    if resp.status_code != 200:
        logger.warning(f"TMDB API error: {resp.status_code}")
        return None
    data = resp.json()
    results = data.get('results')
    if results:
        return results[0]
    return None

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–Ω–æ–±–æ—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/film –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∏–ª—å–º–∞ ‚Äî –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞\n"
        "/tv –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–µ—Ä–∏–∞–ª–∞ ‚Äî –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞"
    )

async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /film")
        return
    query = ' '.join(context.args)
    movie = tmdb_search(query, 'movie')
    if not movie:
        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    title = movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    overview = movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    rating = movie.get('vote_average', '‚Äî')
    poster_path = movie.get('poster_path')
    poster_url = f'https://image.tmdb.org/t/p/w500{poster_path}' if poster_path else None

    text = f"üé¨ <b>{title}</b>\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n{overview}"
    if poster_url:
        await update.message.reply_photo(photo=poster_url, caption=text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')

async def search_tv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /tv")
        return
    query = ' '.join(context.args)
    tv = tmdb_search(query, 'tv')
    if not tv:
        await update.message.reply_text("–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    title = tv.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    overview = tv.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    rating = tv.get('vote_average', '‚Äî')
    poster_path = tv.get('poster_path')
    poster_url = f'https://image.tmdb.org/t/p/w500{poster_path}' if poster_path else None

    text = f"üì∫ <b>{title}</b>\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n{overview}"
    if poster_url:
        await update.message.reply_photo(photo=poster_url, caption=text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
async def handle_update(request: web.Request):
    bot: Bot = request.app['bot']
    data = await request.json()
    update = Update.de_json(data, bot)
    application: Application = request.app['application']
    await application.update_queue.put(update)
    return web.Response(text='OK')

# –ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ aiohttp + telegram bot
async def on_startup(app: web.Application):
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook...")
    bot = Bot(token=TELEGRAM_TOKEN)
    app['bot'] = bot

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    app['application'] = application

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('film', search_movie))
    application.add_handler(CommandHandler('tv', search_tv))

    await application.initialize()
    await application.start()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_cleanup(app: web.Application):
    logger.info("–ß–∏—Å—Ç–∏–º –∑–∞ –±–æ—Ç–æ–º...")
    bot: Bot = app['bot']
    application: Application = app['application']
    await bot.delete_webhook()
    await application.stop()
    await application.shutdown()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def main():
    app = web.Application()
    app.router.add_post(f'/{TELEGRAM_TOKEN}', handle_update)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)

    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    web.run_app(app, port=PORT)

if __name__ == '__main__':
    main()
