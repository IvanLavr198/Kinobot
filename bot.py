import os
import logging
import requests
from aiohttp import web
from telegram import Update, Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–Ω–æ–±–æ—Ç.\n"
        "–ù–∞–ø–∏—à–∏ /film –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "–∏–ª–∏ /tv –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞."
    )

def tmdb_search(query, media_type='movie'):
    url = f'https://api.themoviedb.org/3/search/{media_type}'
    params = {
        'api_key': TMDB_API_KEY,
        'language': 'ru-RU',
        'query': query,
        'include_adult': False
    }
    response = requests.get(url, params=params)
    if response.status_code != 200:
        return None
    data = response.json()
    return data.get('results', [None])[0]

async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ /film")
        return
    query = ' '.join(context.args)
    film = tmdb_search(query, 'movie')
    if not film:
        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    title = film.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    overview = film.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    rating = film.get('vote_average', '‚Äî')
    poster_path = film.get('poster_path')
    poster_url = f'https://image.tmdb.org/t/p/w500{poster_path}' if poster_path else None
    text = f"üé¨ <b>{title}</b>\n\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n{overview}"
    if poster_url:
        await update.message.reply_photo(photo=poster_url, caption=text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')

async def search_tv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ /tv")
        return
    query = ' '.join(context.args)
    tv = tmdb_search(query, 'tv')
    if not tv:
        await update.message.reply_text("–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    title = tv.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    overview = tv.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
    rating = tv.get('vote_average', '‚Äî')
    poster_path = tv.get('poster_path')
    poster_url = f'https://image.tmdb.org/t/p/w500{poster_path}' if poster_path else None
    text = f"üì∫ <b>{title}</b>\n\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n{overview}"
    if poster_url:
        await update.message.reply_photo(photo=poster_url, caption=text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("film", search_movie))
    app.add_handler(CommandHandler("tv", search_tv))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await app.bot.set_webhook(WEBHOOK_URL)
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
