import os
import logging
from typing import Optional, Dict, Any
import requests
from telegram import Update, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    def __init__(self):
        self.TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
        self.TMDB_API_KEY = os.getenv("TMDB_API_KEY")
        self.PORT = int(os.getenv("PORT", "8080"))
        self.WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").rstrip("/")
        self.ENVIRONMENT = os.getenv("ENVIRONMENT", "production")
        
        self.validate()
    
    def validate(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not self.TELEGRAM_TOKEN:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        if not self.TMDB_API_KEY:
            raise ValueError("TMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        if self.ENVIRONMENT == "production" and not self.WEBHOOK_URL:
            raise ValueError("WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è production!")

# ==================== TMDB API ====================
class TMDBClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDB API"""
    BASE_URL = "https://api.themoviedb.org/3"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
    
    def search_movie(self, query: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = requests.get(
                f"{self.BASE_URL}/search/movie",
                params={
                    "api_key": self.api_key,
                    "query": query,
                    "language": "ru-RU",
                    "region": "RU"
                },
                timeout=15
            )
            response.raise_for_status()
            data = response.json()
            return data.get("results", [])[0] if data.get("results") else None
        except (requests.RequestException, IndexError, KeyError) as e:
            logging.error(f"TMDB API error: {str(e)}")
            return None

# ==================== TELEGRAM BOT ====================
class MovieBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    def __init__(self, config: Config):
        self.config = config
        self.tmdb = TMDBClient(config.TMDB_API_KEY)
        self.app = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üé¨ –ö–∏–Ω–æ-–±–æ—Ç\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü' –∏–ª–∏ 'Interstellar'"
        )
    
    async def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.message.text.strip()
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
            return
        
        if movie := self.tmdb.search_movie(query):
            await self.send_movie_info(update, movie)
        else:
            await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
    
    async def send_movie_info(self, update: Update, movie: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"""
        title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        year = movie.get("release_date", "")[:4]
        rating = movie.get("vote_average", 0)
        overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        poster_path = movie.get("poster_path")
        
        message_text = (
            f"üé• <b>{title}</b> ({year if year else '–≥–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})\n"
            f"‚≠ê <b>{rating:.1f}</b>/10\n\n"
            f"{overview}"
        )
        
        if poster_path:
            photo_url = f"https://image.tmdb.org/t/p/w780{poster_path}"
            try:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=message_text,
                    parse_mode="HTML"
                )
                return
            except Exception as e:
                logging.error(f"Error sending photo: {e}")
        
        await update.message.reply_text(message_text, parse_mode="HTML")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ"""
        if self.config.ENVIRONMENT == "production":
            logging.info(f"Starting webhook on {self.config.WEBHOOK_URL}")
            self.app.run_webhook(
                listen="0.0.0.0",
                port=self.config.PORT,
                webhook_url=self.config.WEBHOOK_URL,
                secret_token=None,
            )
        else:
            logging.info("Starting polling...")
            self.app.run_polling()

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    
    try:
        config = Config()
        bot = MovieBot(config)
        bot.run()
    except Exception as e:
        logging.critical(f"Failed to start bot: {str(e)}")
        raise
