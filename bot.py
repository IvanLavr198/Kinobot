import os
import logging
import requests
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather
TMDB_API_KEY = os.getenv("TMDB_API_KEY")      # –ö–ª—é—á —Å https://www.themoviedb.org/
PORT = int(os.getenv("PORT", "8080"))         # –î–ª—è Render
WEBHOOK_URL = os.getenv("WEBHOOK_URL")        # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-bot-name.onrender.com
ENVIRONMENT = os.getenv("ENVIRONMENT", "production")  # production –∏–ª–∏ development

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather")
if not TMDB_API_KEY:
    raise ValueError("TMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://www.themoviedb.org/")

logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ: {ENVIRONMENT}")

# --- –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –≤ TMDb ---
def search_movie(title: str):
    url = "https://api.themoviedb.org/3/search/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "query": title,
        "language": "ru-RU",
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        
        data = response.json()
        if not data.get("results"):
            logger.info(f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {title}")
            return None
            
        return data["results"][0]  # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TMDb: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    return None

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ!"
    )

async def handle_message(update: Update, context: CallbackContext):
    movie_title = update.message.text
    logger.info(f"–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: {movie_title}")
    
    movie = search_movie(movie_title)
    
    if not movie:
        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    year = movie.get("release_date", "?")[:4] if movie.get("release_date") else "?"
    rating = movie.get("vote_average", "?")
    overview = movie.get("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.") or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."
    poster_path = movie.get("poster_path")
    
    text = f"üé• <b>{title}</b> ({year})\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{rating}/10</b>\n\n{overview}"
    
    try:
        if poster_path:
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            await update.message.reply_photo(
                photo=poster_url,
                caption=text,
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if ENVIRONMENT == "production" and WEBHOOK_URL:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ PRODUCTION —Å –≤–µ–±—Ö—É–∫–æ–º")
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}",
            secret_token=None,
        )
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ DEVELOPMENT (polling)")
        app.run_polling()

if __name__ == "__main__":
    main()
