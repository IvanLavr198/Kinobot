import os
import logging
import requests
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes
)
import asyncio

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –£—Å—Ç–∞–Ω–æ–≤–∏ —ç—Ç–æ –≤ Render (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://kinobot-fgym.onrender.com)

logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–Ω–æ–±–æ—Ç.\n"
        "–ù–∞–ø–∏—à–∏ /film –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "–ò–ª–∏ /tv –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞"
    )

# –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ TMDB
def tmdb_search(query, media_type='movie'):
    url = f'https://api.themoviedb.org/3/search/{media_type}'
    params = {
        'api_key': TMDB_API_KEY,
        'language': 'ru-RU',
        'query': query,
        'include_adult': False
    }
    response = requests.get(url, params=params)
    if response.status_code != 200:
        return None
    data = response.json()
    return data['results'][0] if data.get('results') else None

# /film
async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /film")
        return
    film = tmdb_search(' '.join(context.args), 'movie')
    if not film:
        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    text = f"üé¨ <b>{film.get('title')}</b>\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {film.get('vote_average')}\n\n{film.get('overview')}"
    poster = film.get('poster_path')
    if poster:
        await update.message.reply_photo(
            photo=f"https://image.tmdb.org/t/p/w500{poster}",
            caption=text,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(text, parse_mode='HTML')

# /tv
async def search_tv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /tv")
        return
    tv = tmdb_search(' '.join(context.args), 'tv')
    if not tv:
        await update.message.reply_text("–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    text = f"üì∫ <b>{tv.get('name')}</b>\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {tv.get('vote_average')}\n\n{tv.get('overview')}"
    poster = tv.get('poster_path')
    if poster:
        await update.message.reply_photo(
            photo=f"https://image.tmdb.org/t/p/w500{poster}",
            caption=text,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(text, parse_mode='HTML')

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    if not TELEGRAM_TOKEN or not TMDB_API_KEY or not WEBHOOK_URL:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_TOKEN, TMDB_API_KEY, WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("film", search_movie))
    app.add_handler(CommandHandler("tv", search_tv))

    # Webhook start
    await app.initialize()
    await app.bot.set_webhook(WEBHOOK_URL + f"/{TELEGRAM_TOKEN}")
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=TELEGRAM_TOKEN,
        webhook_url=WEBHOOK_URL + f"/{TELEGRAM_TOKEN}",
    )
    print("–ö–∏–Ω–æ–±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook.")
    await app.updater.idle()

if __name__ == '__main__':
    asyncio.run(main())
